import { supabase } from '../services/supabase'

export const testSupabaseConnection = async () => {
  console.log('üîç Testando conex√£o com Supabase...')
  
  try {
    // 1. Testar conex√£o b√°sica
    console.log('1Ô∏è‚É£ Testando conex√£o b√°sica...')
    const { error: healthError } = await supabase
      .from('_temp_health_check_')
      .select('*')
      .limit(1)
    
    if (healthError && !healthError.message.includes('does not exist')) {
      console.error('‚ùå Erro de conex√£o:', healthError)
      return { success: false, error: 'Erro de conex√£o com Supabase' }
    }
    console.log('‚úÖ Conex√£o com Supabase OK')

    // 2. Verificar autentica√ß√£o
    console.log('2Ô∏è‚É£ Verificando autentica√ß√£o...')
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    
    if (userError) {
      console.error('‚ùå Erro de autentica√ß√£o:', userError)
      return { success: false, error: 'Erro de autentica√ß√£o' }
    }
    
    if (!user) {
      console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado')
      return { success: false, error: 'Usu√°rio n√£o autenticado' }
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', user.email)
    console.log('üë§ User ID:', user.id)

    // 3. Verificar se a tabela events existe
    console.log('3Ô∏è‚É£ Verificando tabela events...')
    const { data, error: eventsError } = await supabase
      .from('events')
      .select('*')
      .limit(1)
    
    if (eventsError) {
      console.error('‚ùå Erro ao acessar tabela events:', eventsError)
      
      // Verificar se √© erro de tabela n√£o existe
      if (eventsError.message?.includes('does not exist') || 
          eventsError.code === 'PGRST116') {
        return { 
          success: false, 
          error: 'Tabela events n√£o existe',
          details: eventsError
        }
      }
      
      // Verificar se √© erro de RLS
      if (eventsError.message?.includes('RLS') || 
          eventsError.message?.includes('policy')) {
        return { 
          success: false, 
          error: 'Erro de pol√≠tica RLS - verificar permiss√µes',
          details: eventsError
        }
      }
      
      return { 
        success: false, 
        error: 'Erro desconhecido ao acessar events',
        details: eventsError
      }
    }
    
    console.log('‚úÖ Tabela events acess√≠vel')
    console.log('üìä Eventos encontrados:', data?.length || 0)

    // 4. Testar inser√ß√£o (rollback)
    console.log('4Ô∏è‚É£ Testando permiss√µes de inser√ß√£o...')
    const testEvent = {
      title: 'TESTE_CONEXAO_DELETE_ME',
      description: 'Evento de teste - pode deletar',
      event_date: new Date().toISOString(),
      max_attendees: 1,
      profile_id: user.id
    }
    
    const { data: insertData, error: insertError } = await supabase
      .from('events')
      .insert([testEvent])
      .select()
    
    if (insertError) {
      console.error('‚ùå Erro ao inserir evento de teste:', insertError)
      return { 
        success: false, 
        error: 'Sem permiss√£o para inserir eventos',
        details: insertError
      }
    }
    
    console.log('‚úÖ Inser√ß√£o OK')
    
    // 5. Deletar evento de teste
    if (insertData && insertData[0]) {
      const { error: deleteError } = await supabase
        .from('events')
        .delete()
        .eq('id', insertData[0].id)
      
      if (deleteError) {
        console.warn('‚ö†Ô∏è Erro ao deletar evento de teste:', deleteError)
      } else {
        console.log('‚úÖ Cleanup OK')
      }
    }

    return { 
      success: true, 
      user: user,
      message: 'Todas as verifica√ß√µes passaram!' 
    }
    
  } catch (error) {
    console.error('üí• Erro inesperado:', error)
    return { 
      success: false, 
      error: 'Erro inesperado durante teste',
      details: error
    }
  }
}
